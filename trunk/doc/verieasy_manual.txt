=========
VeriEasy
=========

Motivation
===========

I love Python.  I like Verilog.  I want to combine them.

Others have done this in various ways:
  - Various people have connected Verilator or Verilog simulators using VPI to Python
  - The MyHDL project lets you write in Python and then convert to Verilog

The first approach is nice, particularly with Verilator, because you can
run your Verilog code at considerable speed.  But it doesn't address initial
modeling, where Python could be a lot faster than Verilog.

The second approach, MyHDL, lets you model in Python, but it's not really all
that readable or intuitive.  It has some nice concepts, mostly borrowed from
elsewhere, but on the whole, the problem is that it bolts parallelism
onto the side of Python, rather than creating a domain specific language
that integrates the best of Python with parallelism.

This results in a coding style that I find quite ugly and verbose, and it
appears to be because of a design decision that all MyHDL programs must have
valid Python semantics.

This same design decision means that MyHDL is considerably slower than it could
be, if MyHDL representations were compiled into "real" Python code in a similar
fashion to the the way they are compiled into real Verilog.

Objective
===========

There is a lot in Python to leverage, starting with AST compilation.  We can
use this to leverage Python's infrastructure to create a Python-flavored
parallel programming language that integrates with Python and that can
easily be translated to Verilog (and, of course, VHDL at some point).

What should such a Python-with-parallelism look like?

  - It should have a clean, Python-inspired syntax that is parseable without
    changes by the Python AST.
  - It should be reasonably familiar to both Python and Verilog users, adding
    as few new concepts as possible.
  - It should allow simulation at multiple levels, starting with simple
    Python-style inference of variable types, and allowing later constraints
    to be added.
  - It should be able to interoperate with "real" Python quite easily, and
    to be translated to Verilog quite easily as well.
  - It should handle the hardware needs of its users, but the inability
    to handle all those needs immediately shouldn't keep us from getting
    started.

Proposed semantics by example
==============================


Since the project is in an exploratory stage, semantics could be
subject to change for awhile.  But I think there are some basic
features that are pretty obviously the "right" way to do things.

Simple sequential module
--------------------------

The `MyHDL counter example`__ could look something like this::

    from verieasy import veri

    @veri
    def Inc(clock, resetn, enable, n):
        if not resetn:
            count.next = 0
        elif clock.posedge and enable:
            count.next = (count + 1) % n
        return count

__ http://www.myhdl.org/doc/0.6/manual/conversion_examples.html#a-small-sequential-design


This would be a valid Python module, and the goal would be that
the object that the veri property converts the Inc function into
would be usable from Python, and easily convertible into Verilog.

Note that there is no ugly @always, and no additional def inside
the function, and that the semantics of a register with an asynchronous
reset are captured more accurately by this syntax than they are by the
corresponding Verilog or MyHDL syntax.

Also note that there are no sizes on any of the variables here.  For
Python, we don't really need sizes.  For Verilog generation, we
can easily come up with reasonable default sizes for most things, such
as 1 bit for resetn and enable and clock, and 32 bits (or some other
user-definable default) for the counter, and/or abort the conversion
with an error message if explicit sizes are not provided.  This can
be a user choice.  A user generating code into an FPGA might not
care if the sizes are too big, because the synthesizer will do the
right thing.  A user generating an ASIC might want all the explicitness
he can get.

Finally, note that inputs come into the top of the function, and
outputs are returned out the bottom.  While this does not match
how Verilog works, it is intuitive to anybody who has written
a program, and provides a clear visual indication of the difference
between the inputs and outputs.

Simple combinatorial example
------------------------------

A straightforward translation of the `MyHDL binary to gray counter`__ could look something like this::

    @veri
    def bin2gray(B, width=8):
        int[width:](B, G)
        int[width+1:](Bext)
        Bext = B
        for i in range(width):
            G[i] = Bext[i+1] ^ Bext[i]

        return G

__ http://www.myhdl.org/doc/0.6/manual/conversion_examples.html#a-small-combinatorial-design

Here, we show the association of a size attribute with some of the variables.

Note that, unlike the MyHDL equivalent, there is no .next attribute on G.  A continuous
assignment assigns continuously.  Also note that, like with MyHDL, Verilog programmers
will be slightly surprised that width:0 defines a half-open interval, and Python
programmers will be slightly surprised that width:0 seems backwards.  But both of these
seem like relatively trivial things to explain.

It's important to show that for loops should be supported, but in reality a better
way to do this would be something like::

    @veri
    def bin2gray(B, width=8):
        int[width:](B, G)
        G = B ^ (B >> 1)
        return G

Note that we can abuse the Python 'int' keyword in this fashion because everything
in Python is an object, so the fact that int isn't indexable (or that the result
of such indexing isn't callable) is not a syntax error (but would be a runtime
error if we directly called the defined function from other Python).

Simple Hierarchical example
------------------------------

Again, we compare against the `MyHDL version of the design`__::

    @veri
    def GrayInc(clock, resetn, enable, width):
        inc_1 = Inc(clock=clock, resetn=resetn, enable=enable, n=2**width)
        bin2gray_1 = bin2gray(B=inc_1.count, width=width)
        graycnt = bin2gray_1.G
        return graycnt

    @veri
    def GrayIncReg(clock, resetn, enable, width):
        int[width-1:](graycnt)

        grayinc_1 = GrayInc(clock, resetn)

        grayinc_1.enable = enable
        grayinc_1.width = width

        if clock.posedge:
            graycnt.next = grayinc_1.graycnt

        return graycnt

__http://www.myhdl.org/doc/0.6/manual/conversion_examples.html#a-hierarchical-design

This shows us several features of the proposed new verieasy language:

  - Like Verilog, the result of calling a veri-decorated function is an instantiation
    of a module.
  - Like Python and Verilog, input parameters and ports can be passed either by name or by order.
  - Inputs to a module are also, and outputs from a module are only, available as attributes
    of the instantiated module.
  - Not all signals need to be named at all levels of the hierarchy.  (Automatic
    naming will happen on conversion to Verilog.)

Using the hardware definitions
==============================

As with Verilog, hardware definitions will naturally form a tree structure, and
use of the verieasy code will start with the object at the top of the hierarchy.

There will be several things you can do with the object at the top.  For example,
if the top object was the GrayIncReg hardware module, you could possibly do:

    GrayIncReg.dumpVerilog(fname)

or you could include it in a testbench::

    @veri
    def TestGray(width=10):
        dut = GrayInc(clock, resetn, enable, width)
        graycnt = dut.graycnt

        if initial:
            resetn = 0
            enable = 0
            clock = 0

            for i in range(10):
                clock = not clock
            enable = 1
            for i in range(4096):
                clock = not clock

        if clock.posedge:
            print '%3h %3h' % (dut.grayinc_1.inc_1.count, graycnt)

    sim = TestGray.instantiate()
    sim.run()

Note that, in that example, while there is a notion of events happening, there is
no real notion of current time.  While it is useful to think of clocks happening
at a particular time (especially with multiple clocks), it may be useful to think
of clocks without time, or even of time happening because of clocks.  We should
somehow support both paradigms.  (But obviously, waveform files will have to
have some notion of time embedded in them.)


Bootstrapping
================

The simulator should have the ability to start off with everything set to zeros,
or with everything set to 'x', which should probably equate to float('nan').  In
the latter case, special code will need to be compiled (automatically) by verieasy
around array accesses in order to propagate the nan instead of generating a
typeerror on indexing.  This would slow down simulation, so should probably not
be the normal option.


